#include <gtest/gtest.h>

extern "C" {
  #include <crypto/util.h>
  #include <crypto/keys/keys.h>
}

TEST(Keys, LoadKey) {
  const char * hexKey = "080012a809308204a40201000282010100a95b1185b648e6b64e69414eb456d4004b7db2115cad0fc6d476a144b7913569e9c3d65f94660f4e3eaa7713a33a66755ef102873d44c777a447a9a761bf0a37196ad98e14a01f965ab810aad0a7e97c28c9b843a491692c1d148b440228e828a55729576882a0df1eb2c7cb474301103954761b15b4f4b660847929edcaca094e4ae6f09d724e899e45619282a12e75462731b168cf1eaa0b33c1d964d068539fa91d24ab6825fb10185c542bd54955cbad1d98112e3f651fbff6c4e8cd126fe1c51559addadeed72560e27a6dbbf8f45ece7e7ec6211210c4ab8452e6f9d3bd1c60f444a02223f49d7d5202d842cb34941adc4ae596f32e06d0092e534d88b02030100010282010100a434a0b0bd25c24d5189ccc0bb2ad533d3fe740151929b9175bff06de86eeb135e8d7bf600b55471d16107440b283cdfe0c65e65328ad5bcb394a8729adbd8d3c3d94e47ecc7b4d8dbed4c7bd3047be6dec577dc5e5c7f553e7d04eb540cc5cd634337da8082e7e86ea37a05277b58349ae1c20250f1bbb479b0f8aa26de51355091d26fa4c8b00f1f2a00a053eb6fda409009f41f64fd55f27059d5e66538b04b49c1744d15b270cf485d0e05049a8d11d2c4fbb9278f1620546a7119759d6e20e38a6c04370f19c9ca13135e4c52d86ce884bb99214c38d1750ba5590b64b65a118e316a527121da8d02b1e3275be112adfb1a03f489ae6e0630211a8ec80102818100d8ba6aef63916cf60bcc274a6899d0b5e062e22a69493bf91800470ecccca8031b19bc9630ce12baeb438ef365ae7880b87193868cdb20c243faeee4d647709833a8ab6281ac76fe74f62c71dc86b0d6c28cda2f1c32d3e4885fd635c1cccbebcc0ee52050fc3451319c468a85b206afa9754ba207e59ca6560110fbc977198102818100c80b23664d26828832bf3b34f89fab136b23d443b27d5b9adfa501e7b23cac26166c530f67418ad41a6a968fda69dae9d87a855634ac0a4effd30a1bf075e05a5888da72e01b608caf8e7f94c81c122673102e945ebfabbe47fa9f6e945f45fa121fd02cf676239b79aadb646ad65fdd5759971ef295ac500bff965968f6c00b02818100c113aa8aa4087daae12dba5f26bac95e0e8de970e12556217ec958848ddd515c9afb1db02bc09a9d1d54ad7897408ca818294ec5529d311d00550018abf12f14d908cdce4f39e7349fdc6411f7e5a28b60fcfcaf758eae88ed197c0b9e20a616e64eeabf1486ead0dec29b7172d3fbf2e8a3cf828548807b0b299e08c21db181028180647f13fda4ec9fcf048f85930b044bd1a9958a61a81dca13781f5161b0ed421eb04d233d2dc6839422e1415a6b839a72b84a7509e5d438298fe3d9c4477d3084b2cdadd0e03d60b7ccca6dd5b4e2454c03aa317c604d325e999292dddeb42e577f1b745de2435f88100b81c464d7e5b930d4d552bad3ee89183e02ae504906190281803e839c53aa4131523975eaf481b7a4029e162802cd60b74135eaca1147ce4338e3b14dbd1b3495667386bc479d56b4e18475ce1e6154d2068d65d55d913b6b6e521c4e3399da38d4df31fb91ec3cc47f661d8aa1de528c8e34f70e6bf5decda58e5ae03e22044573ed4d03f9e2505484d95bff81e6f82bf10c7519eba3150e3b";
  ProtobufCBinaryData key = fromHex(hexKey);
  ASSERT_TRUE(strcmp(hexKey, toHex(key)));
  ASSERT_TRUE(key.data);
  Libp2pPrivKey * privKey = unmarshal_private_key(key);
  ASSERT_TRUE(privKey);
}