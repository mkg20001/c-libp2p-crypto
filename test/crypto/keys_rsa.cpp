#include <gtest/gtest.h>

#define

extern "C" {
  #include <crypto/util.h>
  #include <crypto/keys/keys.h>
}

TEST(Keys, LoadKey) {
  ProtobufCBinaryData key = fromHex(HEX_KEY);
  char * hex = toHex(key);
  ASSERT_FALSE(strcmp(HEX_KEY, hex));
  ASSERT_TRUE(key.data);
  Libp2pPrivKey * privKey = unmarshal_private_key(key);
  ASSERT_TRUE(privKey);
  EXPECT_TRUE((RSA *) privKey->data);
  EXPECT_TRUE(privKey->type == KEY_TYPE__RSA);

  free(hex);
  free_private_key(privKey);
  free_data(key);
}

TEST(Keys, LoadAndStore) {
  ProtobufCBinaryData key = fromHex(HEX_KEY);
  Libp2pPrivKey * privKey = unmarshal_private_key(key);
  ProtobufCBinaryData mkey = marshal_private_key(privKey);
  ASSERT_TRUE(mkey.data);
  char * hex = toHex(mkey);
  ASSERT_FALSE(strcmp(HEX_KEY, hex));

  free_private_key(privKey);
  free_data(mkey);
  free(hex);
}

TEST(Keys, Sign) { // TODO: add
  Libp2pPrivKey * privKey = unmarshal_private_key(fromHex(HEX_KEY));

  free_private_key(privKey);
}
